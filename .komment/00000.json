[
  {
    "name": "file.js",
    "path": "file.js",
    "content": {
      "structured": {
        "description": "Several functions that perform various mathematical and string manipulations. It includes implementations for calculating factorials, checking primality, converting temperatures, finding maximum values in arrays, reversing strings, determining palindromes, generating random numbers, calculating circle areas, counting occurrences of elements in arrays, and capitalizing words.",
        "items": [
          {
            "id": "3269cf33-a8da-26a5-cb4a-352aeb79acfa",
            "ancestors": [],
            "description": "Calculates the factorial of a given integer `n`. It recursively multiplies `n` by the factorial of `n-1`, stopping when `n` reaches 0 or 1, at which point it returns 1. The result is the product of all positive integers up to and including `n`.",
            "params": [
              {
                "name": "n",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "0-based input to calculate factorial."
              }
            ],
            "returns": {
              "type_name": "number",
              "description": "The product of all positive integers that are smaller than or equal to the input number `n`, starting with 1 and ending with `n`."
            },
            "usage": {
              "language": "javascript",
              "code": "var result = factorial(5);\n",
              "description": "\nThis code calculates the value of the factorial of number 5."
            },
            "name": "factorial",
            "location": {
              "start": 2,
              "insert": 2,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "6e2f4142-a093-748a-6c4c-823a99dae22f",
            "ancestors": [],
            "description": "Determines whether a given number is prime or not. It checks divisibility of the input number by all numbers up to its square root. If any such divisor exists, it returns `false`, indicating the number is not prime; otherwise, it returns `true`.",
            "params": [
              {
                "name": "num",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Intended to be tested for primality."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "Either `true` if the input number is a prime number and `false` otherwise."
            },
            "usage": {
              "language": "javascript",
              "code": "let number = 11;\nif (isPrime(number)) {\n    // The number is prime\n} else {\n    // The number is not prime\n}\n",
              "description": ""
            },
            "name": "isPrime",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "1705ffa4-bf7d-eda1-e945-2b7715262156",
            "ancestors": [],
            "description": "Determines and returns the maximum value from an array of numbers. It iterates through the array, comparing each element to a variable initialized with the first element's value, updating the variable if a larger value is found.",
            "params": [
              {
                "name": "arr",
                "default_value": null,
                "optional": false,
                "type_name": "number[]",
                "description": "An input array to find the maximum value from."
              }
            ],
            "returns": {
              "type_name": "number",
              "description": "The largest element present in the input array."
            },
            "usage": {
              "language": "javascript",
              "code": "const numbers = [1, 2, 3, 4, 5];\nlet max = findMax(numbers);\n",
              "description": ""
            },
            "name": "findMax",
            "location": {
              "start": 31,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 30
              }
            },
            "item_type": "function",
            "length": 9,
            "docLength": 9
          },
          {
            "id": "238379fc-4730-cea9-7c46-2099731b2342",
            "ancestors": [],
            "description": "Counts the occurrences of each element in the input array and returns an object with keys as unique elements from the array and values as their respective counts.",
            "params": [
              {
                "name": "arr",
                "default_value": null,
                "optional": false,
                "type_name": "(string | number | bigint | symbol | object | function | undefined | null)[]",
                "description": "An array to count occurrences."
              }
            ],
            "returns": {
              "type_name": "any",
              "description": "An object where each property key is a unique value from the input array and its corresponding property value represents the frequency or count of that value in the array."
            },
            "usage": {
              "language": "javascript",
              "code": "var result = countOccurrences(['a', 'b', 'c', 'a', 'b']);\n",
              "description": ""
            },
            "name": "countOccurrences",
            "location": {
              "start": 68,
              "insert": 57,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 56,
                "end": 67
              }
            },
            "item_type": "function",
            "length": 8,
            "docLength": 11
          },
          {
            "id": "059ebe84-0877-f488-b144-bc229ac90402",
            "ancestors": [
              "238379fc-4730-cea9-7c46-2099731b2342"
            ],
            "description": "Counts occurrences in an array.",
            "name": null,
            "location": {
              "start": 69,
              "insert": 70,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "sample.ts",
    "path": "sample.ts",
    "content": {
      "structured": {
        "description": "A React functional component named MathComponent that renders a list of mathematical results using two custom functions add and sin. The add function adds two numbers together, while the sin function calculates the sine of a given angle in radians. The results are displayed as an unordered list with each result labeled with its index.",
        "items": [
          {
            "id": "3dacc4ab-6b84-49af-3f44-99aa92fd7837",
            "ancestors": [],
            "description": "Defines two custom mathematical functions, `add` and `sin`, and combines their results into an array. It then renders a list of these results as HTML, displaying the result number and value for each calculation.",
            "params": [],
            "returns": {
              "type_name": "number | number",
              "description": "An array of two numbers representing the results of mathematical operations."
            },
            "usage": {
              "language": "typescript",
              "code": "function main(): void {\n    ReactDOM.render(<MathComponent />, document.getElementById('root'));\n}\n",
              "description": "\n"
            },
            "name": "MathComponent",
            "location": {
              "start": 2,
              "insert": 2,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]