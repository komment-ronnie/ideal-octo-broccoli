/**
 * @description Calculates the factorial of a given integer `n`. The function uses
 * recursion to compute the result, returning 1 for inputs 0 and 1, and multiplying
 * `n` with the factorial of `n-1` otherwise.
 * 
 * @param {number} n - 0 or any positive integer.
 * 
 * @returns {number} The product of all positive integers from 1 to `n`, where `n`
 * is a non-negative integer.
 */
function factorial(n) {
    if (n === 0 || n === 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}
/**
 * @description Determines whether a given integer is a prime number or not. It returns
 * `false` if the input number is less than or equal to 1, and checks for divisibility
 * by numbers up to its square root. If it finds no divisors, it returns `true`.
 * 
 * @param {number} num - Checked for primality.
 * 
 * @returns {boolean} True if the input number is a prime number and false otherwise.
 */
function isPrime(num) {
    if (num <= 1) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) return false;
    }
    return true;
}

/**
 * @description Converts a given temperature in Celsius to Fahrenheit. It multiplies
 * the input temperature by 9, divides the result by 5, and then adds 32 to produce
 * the equivalent Fahrenheit value.
 * 
 * @param {number} celsius - Celsius temperature value to convert.
 * 
 * @returns {number} 32 degrees Fahrenheit plus nine-fifths of the given Celsius temperature.
 */
function celsiusToFahrenheit(celsius) {
    return (celsius * 9 / 5) + 32;
}

/**
 * @description Identifies and returns the largest element from a given array. It
 * initializes the maximum value to the first element, then iterates through the
 * remaining elements to compare with the current maximum. If a larger element is
 * found, it updates the maximum value until the end of the array.
 * 
 * @param {number[]} arr - An array to be searched for the maximum value.
 * 
 * @returns {number} The maximum element from the input array.
 */
function findMax(arr) {
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

/**
 * @description Takes a string as input and returns its reverse. It does so by splitting
 * the string into an array of individual characters using `split('')`, reversing the
 * array with `reverse()`, and then joining the reversed array back into a string
 * with `join('')`.
 * 
 * @param {string} str - Input to be reversed.
 * 
 * @returns {string} A reversed version of the input string.
 */
function reverseString(str) {
    return str.split('').reverse().join('');
}

/**
 * @description Checks whether a given string is a palindrome by comparing it with
 * its reversed version, which is generated by the `reverseString` function. It returns
 * `true` if the original string is equal to its reverse, and `false` otherwise.
 * 
 * @param {string} str - Being checked for palindrome status.
 * 
 * @returns {boolean} True if the input string is a palindrome and false otherwise.
 */
function isPalindrome(str) {
    return str === reverseString(str);
}

/**
 * @description Generates a random integer within a specified range defined by `min`
 * and `max`. It calculates the upper bound of the range, then uses `Math.random()`
 * to produce a random number between 0 and that value. The result is added to `min`,
 * ensuring inclusivity of both bounds.
 * 
 * @param {number} min - The lower bound of the range.
 * 
 * @param {number} max - Upper bound for generating random numbers.
 * 
 * @returns {number} A random integer within the range of [min, max].
 */
function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * @description Calculates the area of a circle given its radius. It multiplies the
 * mathematical constant pi (`Math.PI`) by the squared value of the input `radius`,
 * returning the resulting area as an output.
 * 
 * @param {number} radius - Necessary for calculating the area of a circle.
 * 
 * @returns {number} The area of a circle given its radius, calculated as Pi multiplied
 * by the square of the radius.
 */
function calculateCircleArea(radius) {
    return Math.PI * radius ** 2;
}

/**
 * @description Counts the occurrences of each value in a given array, returning an
 * object where each key is a unique value from the array and its corresponding value
 * is the count of that occurrence.
 * 
 * @param {(string | number | bigint | object | boolean | symbol | null | undefined)[]}
 * arr - An array to be processed.
 * 
 * @returns {any} An object where each property represents a unique element from the
 * input array and its corresponding value is the count of that element's occurrences
 * in the array.
 */
function countOccurrences(arr) {
    return arr.reduce((acc, val) => {
        // Counts array elements' occurrences.

        // Counts occurrences.

        acc[val] = (acc[val] || 0) + 1;
        return acc;
    }, {});
}

/**
 * @description Splits a given sentence into individual words, capitalizes the first
 * character of each word while keeping the rest of the word unchanged, and then joins
 * the modified words back together to form the resulting sentence with capitalized
 * words.
 * 
 * @param {string} sentence - Intended to hold a sentence for capitalization processing.
 * 
 * @returns {string} The input sentence where each word has been capitalized by
 * converting the first character to uppercase and keeping the rest of the word unchanged.
 */
function capitalizeWords(sentence) {
    return sentence.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}
